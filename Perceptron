# 学习链接：https://www.zybuluo.com/hanbingtao/note/433855
from functools import reduce


class Perceptron(object):
    def __init__(self, input_num, activator):
        # 激活函数
        self.activator = activator
        # 初始权值的设定
        self.weights = [0.0 for x in range(input_num)]
        # 初始偏置的设定
        self.bias = 0.0

    def __str__(self):
        # 输出情况 便于找BUG  这里注意 self.weights前要加list，否则输出内存地址
        return 'weights\t:%s\nbias\t:%f\n' % (list(self.weights), self.bias)

    def predict(self, input_vec):
        # 对输入向量进行结果预测，reduce的第三个参数是初始值  最后要加个偏置来修正
        return self.activator(reduce(lambda a, b: a + b,
                                     list(
                                         map(
                                             lambda a, b: a * b, input_vec, self.weights
                                         )
                                     ), 0.0) + self.bias
                              )
    # 进行训练
    def train(self, input_vecs, labels, iteration, rate):
        for i in range(iteration):
            self._one_iteration(input_vecs, labels, rate)

    # 进行一轮训练
    def _one_iteration(self, input_vecs, labels, rate):
        for input_vec, label in zip(input_vecs, labels):
            # print('input_vec:%s\nlabel"%f'%(input_vec,label))
            output = self.predict(input_vec)
            self.update_weights(input_vec, output, label, rate)
            # print(self)

    def update_weights(self, input_vec, output, label, rate):
        delta = label - output
        # 此处一个坑点是map前要加list，否则就会产生一个map类型的东西
        self.weights = list(map(lambda x, w: w + rate * delta * x, input_vec, self.weights))
        self.bias = self.bias + rate * delta


def f(x):
    return 1 if x > 0 else 0


def get_training_dataset():
    input_vecs = [[1, 1], [0, 0], [1, 0], [0, 1]]
    labels = [1, 0, 0, 0]
    return input_vecs, labels


def train_and_perceptron():
    '''
    使用and真值表训练感知器
    '''
    # 创建感知器，输入参数个数为2（因为and是二元函数），激活函数为f
    p = Perceptron(2, f)
    # 训练，迭代10轮, 学习速率为0.1
    input_vecs, labels = get_training_dataset()
    p.train(input_vecs, labels, 10, 0.1)
    # 返回训练好的感知器
    return p


if __name__ == '__main__':
    # 训练and感知器
    and_perception = train_and_perceptron()
    # 打印训练获得的权重
    print(and_perception)
    # 测试
    print('1 and 1 = %d' % and_perception.predict([1, 1]))
    print('0 and 0 = %d' % and_perception.predict([0, 0]))
    print('1 and 0 = %d' % and_perception.predict([1, 0]))
    print('0 and 1 = %d' % and_perception.predict([0, 1]))
